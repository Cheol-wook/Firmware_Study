
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000faf  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ba  00000000  00000000  000013bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f6  00000000  00000000  00001d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00002370  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000458  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000607  00000000  00000000  0000289c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002ea3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	87 d0       	rcall	.+270    	; 0x1a8 <main>
  9a:	1a c1       	rjmp	.+564    	; 0x2d0 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <Lcd_Data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	e5 e6       	ldi	r30, 0x65	; 101
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	90 81       	ld	r25, Z
  a4:	91 60       	ori	r25, 0x01	; 1
  a6:	90 83       	st	Z, r25
  a8:	90 81       	ld	r25, Z
  aa:	9d 7f       	andi	r25, 0xFD	; 253
  ac:	90 83       	st	Z, r25
  ae:	90 81       	ld	r25, Z
  b0:	94 60       	ori	r25, 0x04	; 4
  b2:	90 83       	st	Z, r25
  b4:	90 e1       	ldi	r25, 0x10	; 16
  b6:	9a 95       	dec	r25
  b8:	f1 f7       	brne	.-4      	; 0xb6 <Lcd_Data+0x18>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <Lcd_Data+0x1e>
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <Lcd_Data+0x22>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <Lcd_Data+0x28>
  c6:	80 81       	ld	r24, Z
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <Lcd_Cmd>:
  ce:	e5 e6       	ldi	r30, 0x65	; 101
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	9e 7f       	andi	r25, 0xFE	; 254
  d6:	90 83       	st	Z, r25
  d8:	90 81       	ld	r25, Z
  da:	9d 7f       	andi	r25, 0xFD	; 253
  dc:	90 83       	st	Z, r25
  de:	90 81       	ld	r25, Z
  e0:	94 60       	ori	r25, 0x04	; 4
  e2:	90 83       	st	Z, r25
  e4:	90 e1       	ldi	r25, 0x10	; 16
  e6:	9a 95       	dec	r25
  e8:	f1 f7       	brne	.-4      	; 0xe6 <Lcd_Cmd+0x18>
  ea:	00 c0       	rjmp	.+0      	; 0xec <Lcd_Cmd+0x1e>
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	8a 95       	dec	r24
  f2:	f1 f7       	brne	.-4      	; 0xf0 <Lcd_Cmd+0x22>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <Lcd_Cmd+0x28>
  f6:	80 81       	ld	r24, Z
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	80 83       	st	Z, r24
  fc:	08 95       	ret

000000fe <Lcd_CHAR>:
  fe:	cf df       	rcall	.-98     	; 0x9e <Lcd_Data>
 100:	89 ef       	ldi	r24, 0xF9	; 249
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <Lcd_CHAR+0x6>
 108:	00 c0       	rjmp	.+0      	; 0x10a <Lcd_CHAR+0xc>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <Lcd_STR>:
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	ec 01       	movw	r28, r24
 114:	02 c0       	rjmp	.+4      	; 0x11a <Lcd_STR+0xc>
 116:	f3 df       	rcall	.-26     	; 0xfe <Lcd_CHAR>
 118:	21 96       	adiw	r28, 0x01	; 1
 11a:	88 81       	ld	r24, Y
 11c:	81 11       	cpse	r24, r1
 11e:	fb cf       	rjmp	.-10     	; 0x116 <Lcd_STR+0x8>
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <Lcd_Pos>:
 126:	90 e4       	ldi	r25, 0x40	; 64
 128:	89 9f       	mul	r24, r25
 12a:	60 0d       	add	r22, r0
 12c:	11 24       	eor	r1, r1
 12e:	86 2f       	mov	r24, r22
 130:	80 68       	ori	r24, 0x80	; 128
 132:	cd df       	rcall	.-102    	; 0xce <Lcd_Cmd>
 134:	83 ec       	ldi	r24, 0xC3	; 195
 136:	99 e0       	ldi	r25, 0x09	; 9
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <Lcd_Pos+0x12>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <Lcd_Pos+0x18>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <Lcd_Clear>:
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	c4 df       	rcall	.-120    	; 0xce <Lcd_Cmd>
 146:	83 ec       	ldi	r24, 0xC3	; 195
 148:	99 e0       	ldi	r25, 0x09	; 9
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <Lcd_Clear+0x8>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <Lcd_Clear+0xe>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <Lcd_Init>:
	}
}

void Lcd_Init(void)
{
	Lcd_Cmd(0x38);
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	bb df       	rcall	.-138    	; 0xce <Lcd_Cmd>
 158:	83 ef       	ldi	r24, 0xF3	; 243
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <Lcd_Init+0x8>
 160:	00 c0       	rjmp	.+0      	; 0x162 <Lcd_Init+0xe>
 162:	00 00       	nop
	_delay_ms(2);	//명령어를 IR에 쓰고나면 40us 또는 1.64ms을 기다림.
	Lcd_Cmd(0x38);
 164:	88 e3       	ldi	r24, 0x38	; 56
 166:	b3 df       	rcall	.-154    	; 0xce <Lcd_Cmd>
 168:	83 ef       	ldi	r24, 0xF3	; 243
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <Lcd_Init+0x18>
 170:	00 c0       	rjmp	.+0      	; 0x172 <Lcd_Init+0x1e>
	_delay_ms(2);
	Lcd_Cmd(0x38);
 172:	00 00       	nop
 174:	88 e3       	ldi	r24, 0x38	; 56
 176:	ab df       	rcall	.-170    	; 0xce <Lcd_Cmd>
 178:	83 ef       	ldi	r24, 0xF3	; 243
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <Lcd_Init+0x28>
 180:	00 c0       	rjmp	.+0      	; 0x182 <Lcd_Init+0x2e>
	_delay_ms(2);
	Lcd_Cmd(0x0c);
 182:	00 00       	nop
 184:	8c e0       	ldi	r24, 0x0C	; 12
 186:	a3 df       	rcall	.-186    	; 0xce <Lcd_Cmd>
 188:	83 ef       	ldi	r24, 0xF3	; 243
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <Lcd_Init+0x38>
 190:	00 c0       	rjmp	.+0      	; 0x192 <Lcd_Init+0x3e>
	_delay_ms(2);
	Lcd_Cmd(0x06);
 192:	00 00       	nop
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	9b df       	rcall	.-202    	; 0xce <Lcd_Cmd>
 198:	83 ef       	ldi	r24, 0xF3	; 243
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <Lcd_Init+0x48>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <Lcd_Init+0x4e>
	_delay_ms(2);
	Lcd_Clear();
 1a2:	00 00       	nop
 1a4:	ce cf       	rjmp	.-100    	; 0x142 <Lcd_Clear>
 1a6:	08 95       	ret

000001a8 <main>:
#define F_CPU 7372800UL
#include <avr/io.h>
#include <util/delay.h>
#include "Lcd.h"

int main(){
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
 1b0:	60 97       	sbiw	r28, 0x10	; 16
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
	
	DDRA = 0xff;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	8a bb       	out	0x1a, r24	; 26
	DDRG = 0xff;
 1c0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	Lcd_Init();
 1c4:	c7 df       	rcall	.-114    	; 0x154 <Lcd_Init>
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	8f e3       	ldi	r24, 0x3F	; 63
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0x24>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x2e>
	
	_delay_ms(100);
	
	Lcd_Clear();
 1d6:	00 00       	nop
 1d8:	b4 df       	rcall	.-152    	; 0x142 <Lcd_Clear>
	Byte str[16];
	int i;
	int j;
	
	while(1){
		for(i = 1; i < 10; i++)
 1da:	ee 24       	eor	r14, r14
 1dc:	e3 94       	inc	r14
 1de:	f1 2c       	mov	r15, r1
 1e0:	4b c0       	rjmp	.+150    	; 0x278 <main+0xd0>
		{
			for(j = 1; j < 10; j++)
			{	
				for(int num = 0; num < 16; num++)
					str[num] = ' ';
 1e2:	e1 e0       	ldi	r30, 0x01	; 1
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ec 0f       	add	r30, r28
 1e8:	fd 1f       	adc	r31, r29
 1ea:	e8 0f       	add	r30, r24
 1ec:	f9 1f       	adc	r31, r25
 1ee:	20 e2       	ldi	r18, 0x20	; 32
 1f0:	20 83       	st	Z, r18
	while(1){
		for(i = 1; i < 10; i++)
		{
			for(j = 1; j < 10; j++)
			{	
				for(int num = 0; num < 16; num++)
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <main+0x52>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	80 31       	cpi	r24, 0x10	; 16
 1fc:	91 05       	cpc	r25, r1
 1fe:	8c f3       	brlt	.-30     	; 0x1e2 <main+0x3a>
					str[num] = ' ';
				
				str[1] = ('0' + i);
 200:	80 e3       	ldi	r24, 0x30	; 48
 202:	8e 0d       	add	r24, r14
 204:	8a 83       	std	Y+2, r24	; 0x02
				str[2] = 'X';
 206:	88 e5       	ldi	r24, 0x58	; 88
 208:	8b 83       	std	Y+3, r24	; 0x03
				str[3] = ('0' + j);
 20a:	80 e3       	ldi	r24, 0x30	; 48
 20c:	80 0f       	add	r24, r16
 20e:	8c 83       	std	Y+4, r24	; 0x04
				str[4] = '=';
 210:	8d e3       	ldi	r24, 0x3D	; 61
 212:	8d 83       	std	Y+5, r24	; 0x05
				if(i*j >= 10)
 214:	e0 9e       	mul	r14, r16
 216:	c0 01       	movw	r24, r0
 218:	e1 9e       	mul	r14, r17
 21a:	90 0d       	add	r25, r0
 21c:	f0 9e       	mul	r15, r16
 21e:	90 0d       	add	r25, r0
 220:	11 24       	eor	r1, r1
 222:	8a 30       	cpi	r24, 0x0A	; 10
 224:	91 05       	cpc	r25, r1
 226:	44 f0       	brlt	.+16     	; 0x238 <main+0x90>
				{
					str[5] = ('0' + (j*i)/10);
 228:	6a e0       	ldi	r22, 0x0A	; 10
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	2a d0       	rcall	.+84     	; 0x282 <__divmodhi4>
 22e:	60 5d       	subi	r22, 0xD0	; 208
 230:	6e 83       	std	Y+6, r22	; 0x06
					str[6] = ('0' + (j*i)%10);
 232:	80 5d       	subi	r24, 0xD0	; 208
 234:	8f 83       	std	Y+7, r24	; 0x07
 236:	05 c0       	rjmp	.+10     	; 0x242 <main+0x9a>
				}
				else
				{
					str[6] = ('0' + (j*i));
 238:	0e 9d       	mul	r16, r14
 23a:	80 2d       	mov	r24, r0
 23c:	11 24       	eor	r1, r1
 23e:	80 5d       	subi	r24, 0xD0	; 208
				}
				
				Lcd_Pos(0, 0);
 240:	8f 83       	std	Y+7, r24	; 0x07
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 e0       	ldi	r24, 0x00	; 0
				Lcd_STR(str);
 246:	6f df       	rcall	.-290    	; 0x126 <Lcd_Pos>
 248:	ce 01       	movw	r24, r28
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	60 df       	rcall	.-320    	; 0x10e <Lcd_STR>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	9b e0       	ldi	r25, 0x0B	; 11
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0xac>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0xb6>
 25e:	00 00       	nop
	int j;
	
	while(1){
		for(i = 1; i < 10; i++)
		{
			for(j = 1; j < 10; j++)
 260:	0f 5f       	subi	r16, 0xFF	; 255
 262:	1f 4f       	sbci	r17, 0xFF	; 255
 264:	02 c0       	rjmp	.+4      	; 0x26a <main+0xc2>
 266:	01 e0       	ldi	r16, 0x01	; 1
 268:	10 e0       	ldi	r17, 0x00	; 0
 26a:	0a 30       	cpi	r16, 0x0A	; 10
 26c:	11 05       	cpc	r17, r1
 26e:	0c f4       	brge	.+2      	; 0x272 <main+0xca>
 270:	c2 cf       	rjmp	.-124    	; 0x1f6 <main+0x4e>
	Byte str[16];
	int i;
	int j;
	
	while(1){
		for(i = 1; i < 10; i++)
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	e2 1a       	sub	r14, r18
 276:	f2 0a       	sbc	r15, r18
 278:	8a e0       	ldi	r24, 0x0A	; 10
 27a:	e8 16       	cp	r14, r24
 27c:	f1 04       	cpc	r15, r1
 27e:	9c f3       	brlt	.-26     	; 0x266 <main+0xbe>
 280:	ac cf       	rjmp	.-168    	; 0x1da <main+0x32>

00000282 <__divmodhi4>:
 282:	97 fb       	bst	r25, 7
 284:	07 2e       	mov	r0, r23
 286:	16 f4       	brtc	.+4      	; 0x28c <__divmodhi4+0xa>
 288:	00 94       	com	r0
 28a:	06 d0       	rcall	.+12     	; 0x298 <__divmodhi4_neg1>
 28c:	77 fd       	sbrc	r23, 7
 28e:	08 d0       	rcall	.+16     	; 0x2a0 <__divmodhi4_neg2>
 290:	0b d0       	rcall	.+22     	; 0x2a8 <__udivmodhi4>
 292:	07 fc       	sbrc	r0, 7
 294:	05 d0       	rcall	.+10     	; 0x2a0 <__divmodhi4_neg2>
 296:	3e f4       	brtc	.+14     	; 0x2a6 <__divmodhi4_exit>

00000298 <__divmodhi4_neg1>:
 298:	90 95       	com	r25
 29a:	81 95       	neg	r24
 29c:	9f 4f       	sbci	r25, 0xFF	; 255
 29e:	08 95       	ret

000002a0 <__divmodhi4_neg2>:
 2a0:	70 95       	com	r23
 2a2:	61 95       	neg	r22
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255

000002a6 <__divmodhi4_exit>:
 2a6:	08 95       	ret

000002a8 <__udivmodhi4>:
 2a8:	aa 1b       	sub	r26, r26
 2aa:	bb 1b       	sub	r27, r27
 2ac:	51 e1       	ldi	r21, 0x11	; 17
 2ae:	07 c0       	rjmp	.+14     	; 0x2be <__udivmodhi4_ep>

000002b0 <__udivmodhi4_loop>:
 2b0:	aa 1f       	adc	r26, r26
 2b2:	bb 1f       	adc	r27, r27
 2b4:	a6 17       	cp	r26, r22
 2b6:	b7 07       	cpc	r27, r23
 2b8:	10 f0       	brcs	.+4      	; 0x2be <__udivmodhi4_ep>
 2ba:	a6 1b       	sub	r26, r22
 2bc:	b7 0b       	sbc	r27, r23

000002be <__udivmodhi4_ep>:
 2be:	88 1f       	adc	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	5a 95       	dec	r21
 2c4:	a9 f7       	brne	.-22     	; 0x2b0 <__udivmodhi4_loop>
 2c6:	80 95       	com	r24
 2c8:	90 95       	com	r25
 2ca:	bc 01       	movw	r22, r24
 2cc:	cd 01       	movw	r24, r26
 2ce:	08 95       	ret

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
